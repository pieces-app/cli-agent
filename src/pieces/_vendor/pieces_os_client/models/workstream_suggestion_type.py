# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictBool

class WorkstreamSuggestionType(BaseModel):
    """
    This is used to map the types of the iterable to given booleans of their respective material types  # noqa: E501
    """
    var_schema: Optional[StrictBool] = Field(default=None, alias="schema")
    summary: Optional[StrictBool] = None
    asset: Optional[StrictBool] = None
    tag: Optional[StrictBool] = None
    website: Optional[StrictBool] = None
    anchor: Optional[StrictBool] = None
    conversation: Optional[StrictBool] = None
    person: Optional[StrictBool] = None
    seed: Optional[StrictBool] = None
    seeds: Optional[StrictBool] = None
    summaries: Optional[StrictBool] = None
    assets: Optional[StrictBool] = None
    tags: Optional[StrictBool] = None
    websites: Optional[StrictBool] = None
    anchors: Optional[StrictBool] = None
    conversations: Optional[StrictBool] = None
    persons: Optional[StrictBool] = None
    __properties = ["schema", "summary", "asset", "tag", "website", "anchor", "conversation", "person", "seed", "seeds", "summaries", "assets", "tags", "websites", "anchors", "conversations", "persons"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkstreamSuggestionType:
        """Create an instance of WorkstreamSuggestionType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkstreamSuggestionType:
        """Create an instance of WorkstreamSuggestionType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkstreamSuggestionType.parse_obj(obj)

        _obj = WorkstreamSuggestionType.parse_obj({
            "var_schema": obj.get("schema"),
            "summary": obj.get("summary"),
            "asset": obj.get("asset"),
            "tag": obj.get("tag"),
            "website": obj.get("website"),
            "anchor": obj.get("anchor"),
            "conversation": obj.get("conversation"),
            "person": obj.get("person"),
            "seed": obj.get("seed"),
            "seeds": obj.get("seeds"),
            "summaries": obj.get("summaries"),
            "assets": obj.get("assets"),
            "tags": obj.get("tags"),
            "websites": obj.get("websites"),
            "anchors": obj.get("anchors"),
            "conversations": obj.get("conversations"),
            "persons": obj.get("persons")
        })
        return _obj


