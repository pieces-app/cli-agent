# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic.v1 import BaseModel, Field, StrictInt
from pieces._vendor.pieces_os_client.models.embedded_model_schema_semantic_version_enum import EmbeddedModelSchemaSemanticVersionEnum

class EmbeddedModelSchema(BaseModel):
    """
    This is a model that will keep track of all of our version related to our models. ie (1) the database migration and (2) the global semantic version of the api.  # noqa: E501
    """
    migration: StrictInt = Field(default=..., description="this is the current database version that this model was used for.")
    semantic: EmbeddedModelSchemaSemanticVersionEnum = Field(...)
    __properties = ["migration", "semantic"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EmbeddedModelSchema:
        """Create an instance of EmbeddedModelSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EmbeddedModelSchema:
        """Create an instance of EmbeddedModelSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EmbeddedModelSchema.parse_obj(obj)

        _obj = EmbeddedModelSchema.parse_obj({
            "migration": obj.get("migration"),
            "semantic": obj.get("semantic")
        })
        return _obj


