name: Security Checks

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          pip install safety bandit pip-audit
          
      - name: Run Safety Check
        run: |
          # Check for known security vulnerabilities
          safety check --json --output safety-report.json || true
          
          # Create summary
          if [ -f safety-report.json ]; then
            echo "## Safety Security Check" >> $GITHUB_STEP_SUMMARY
            echo "Vulnerabilities found: $(jq length safety-report.json)" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Run pip-audit
        run: |
          # Audit Python packages
          pip-audit --format json --output pip-audit-report.json || true
          
          if [ -f pip-audit-report.json ]; then
            echo "## Pip Audit Results" >> $GITHUB_STEP_SUMMARY
            jq -r '.vulnerabilities[] | "- \(.name) \(.version): \(.description)"' pip-audit-report.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Run Bandit
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json || true
          
          # Generate SARIF for GitHub Security
          bandit -r src/ -f sarif -o bandit-results.sarif || true
          
      - name: Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-results.sarif
          category: bandit

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better detection
          
      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Check Licenses
        run: |
          pip install pip-licenses
          pip-licenses --format=csv --output-file=licenses.csv
          
          # Check for problematic licenses
          if grep -E "(GPL|AGPL|SSPL)" licenses.csv; then
            echo "::warning::Found potentially incompatible licenses"
          fi
          
          echo "## License Summary" >> $GITHUB_STEP_SUMMARY
          echo "Total dependencies: $(tail -n +2 licenses.csv | wc -l)" >> $GITHUB_STEP_SUMMARY

  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"

  security-scorecard:
    name: OpenSSF Scorecard
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      id-token: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          
      - name: Run Scorecard Analysis
        uses: ossf/scorecard-action@v2
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true
          
      - name: Upload Scorecard Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  create-security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, code-security, container-scan, secrets-scan, license-check]
    if: always()
    steps:
      - name: Create Summary
        run: |
          echo "# Security Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Security | ${{ needs.code-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Scan | ${{ needs.container-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Scan | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… All security checks completed" >> $GITHUB_STEP_SUMMARY